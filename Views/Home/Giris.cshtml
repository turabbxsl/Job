@model IsAxtaris.Models.tbl_istifadeci

@{
    Layout = null;
}


<html>
<head>
    <link rel="stylesheet" href="~/loginyeri.css" />
    <link rel="stylesheet" href="~/svg.css" />
    <link rel="stylesheet" href="~/anim.css" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/TweenMax.min.js"></script>
</head>
<body>
    <div style="background-color:transparent;width:1430px;height:750px;">
        <div class="btn-group mt-2 mb-4" role="group" aria-label="actionButtons" style="height:400px;">

            <ul class="circles">
                <li></li>
                <li></li>
                <li></li>
                <li></li>
                <li></li>
                <li></li>
                <li></li>
                <li></li>
                <li></li>
                <li></li>
            </ul>

            <div class="blurred-box" style="margin-top:50px;margin-left:-50px;">

                <div class="form-structor">

                    @using (Html.BeginForm("Qeydiyyatt", "Home", FormMethod.Post))
                    {
                        if (Session["istifadeciuygunlugu"] != null)
                        {
                            <table>
                                <tr>
                                    <td><img src="~/Sekiller/16x16.png" style="margin-top:162px;margin-left:20px;" /> </td>
                                    <td><p id="gfg" style="color:red;float:left;font-size:14px;margin-top:180px;text-align:center;margin-left:35px;">Başqa İstifadəçi Adı Daxil Edin</p></td>
                                </tr>
                            </table>



                        }


                        <div class="login slide-up">
                            <div class="center">
                                <h2 class="form-title" id="login"><span>Və Ya</span>Qeydiyyat</h2>

                                <div class="form-holder" style="height:130px;margin-top:50px;">

                                    <input type="text" class="input" title="İstifadəçi Adı 5 İlə 16 Kiçik Hərflərdən İbarət Olmalıdır.Məsələn: turabbaxisli" pattern="[a-z]{5,16}" placeholder="İstifadəçi Adı" name="istifadeciadi" required />
                                    <input type="email" class="input" placeholder="E-Mail" name="email" required />
                                    <input type="password" class="input" title="Şifrəniz 4 İlə 12 Kiçik Hərflərdən İbarət Və Sonu Rəqəmlə Bitməlidir.Məsələn: turabbl1999" pattern="[a-z]{4,12}[0-9]+" placeholder="Şifrə" name="sifre" required />
                                </div>
                                <button class="submit-btn" style="color:white;">Qeydiyyat Ol</button>
                            </div>
                        </div>
                        <style>
                            
                        </style>

                    }

                    @using (Html.BeginForm("Giris", "Home", FormMethod.Post))
                    {

                        if (Session["loginsehv"] != null)
                        {
                            <table>
                                <tr>
                                    <td><img src="~/Sekiller/16x16.png" style="margin-top:162px;margin-left:20px;" /> </td>
                                    <td style="margin-left:-10px;"><p id="gfg" style="color:red;float:left;font-size:14px;margin-top:180px;text-align:center;margin-left:20px;">İstifadəçi Adı Və Ya Şifrəniz Yanlışdır.</p></td>
                                </tr>
                            </table>


                        }
                        
                        <div class="signup" >
                            <h2 class="form-title wrapword" id="signup" style="margin-left:-30px;color:white"><span>Və Ya</span>Giris</h2>
                            <div class="form-holder" style="height:80px;margin-top:80px;">
                                <input type="text" class="input" placeholder="İstifadəçi Adı" name="istifadeciadi" />
                                <input type="password" class="input" placeholder="Şifrə" name="sifre" />

                            </div>

                            <button class="submit-btn" style="color:white;">Giris Et</button>

                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
</body>
</html>












<style>
    .submit-btn {
        margin-top: 40px;
        background: linear-gradient(to left,#7798db,#669bcc,#7798db);
        color: rgba(256,256,256,0.7);
        border: 0;
        border-radius: 15px;
        display: block;
        margin-top: 40px;
        padding: 15px 45px;
        width: 100%;
        font-size: 17px;
        font-weight: bold;
        cursor: pointer;
        opacity: 1;
        visibility: visible;
        -webkit-transition: all .3s ease;
        overflow: auto;
        outline: none;
        -webkit-box-shadow: none;
        -moz-box-shadow: none;
        box-shadow: none;
    }

        .submit-btn:hover {
            transition: all .3s ease;
            background-color: rgba(0,0,0,0.8);
        }


    .signup span {
        margin-left: -50px;
    }

    .login span {
        margin-left: 0px;
    }

    .login h2 {
        margin-left: -70px;
        margin-top:200px;
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/js/all.min.js" integrity="sha256-qM7QTJSlvtPSxVRjVWNM2OfTAz/3k5ovHOKmKXuYMO4=" crossorigin="anonymous"></script>
<style>
    ::-webkit-scrollbar {
        width: 9px;
    }

    ::-webkit-scrollbar-thumb {
        background: linear-gradient(transparent,#2f8eaa,#00c6ff);
        border-radius: 6px;
    }

        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(transparent,#4e7f8f,#27768d);
            border-radius: 6px;
        }

</style>
<script>
    window.human = false;

    var canvasEl = document.querySelector('.fireworks');
    var ctx = canvasEl.getContext('2d');
    var numberOfParticules = 30;
    var pointerX = 0;
    var pointerY = 0;
    var tap = ('ontouchstart' in window || navigator.msMaxTouchPoints) ? 'touchstart' : 'mousedown';
    var colors = ['#FF1461', '#18FF92', '#5A87FF', '#FBF38C'];

    function setCanvasSize() {
        canvasEl.width = window.innerWidth * 2;
        canvasEl.height = window.innerHeight * 2;
        canvasEl.style.width = window.innerWidth + 'px';
        canvasEl.style.height = window.innerHeight + 'px';
        canvasEl.getContext('2d').scale(2, 2);
    }

    function updateCoords(e) {
        pointerX = e.clientX || e.touches[0].clientX;
        pointerY = e.clientY || e.touches[0].clientY;
    }

    function setParticuleDirection(p) {
        var angle = anime.random(0, 360) * Math.PI / 180;
        var value = anime.random(50, 180);
        var radius = [-1, 1][anime.random(0, 1)] * value;
        return {
            x: p.x + radius * Math.cos(angle),
            y: p.y + radius * Math.sin(angle)
        }
    }

    function createParticule(x, y) {
        var p = {};
        p.x = x;
        p.y = y;
        p.color = colors[anime.random(0, colors.length - 1)];
        p.radius = anime.random(16, 32);
        p.endPos = setParticuleDirection(p);
        p.draw = function () {
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true);
            ctx.fillStyle = p.color;
            ctx.fill();
        }
        return p;
    }

    function createCircle(x, y) {
        var p = {};
        p.x = x;
        p.y = y;
        p.color = '#FFF';
        p.radius = 0.1;
        p.alpha = .5;
        p.lineWidth = 6;
        p.draw = function () {
            ctx.globalAlpha = p.alpha;
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true);
            ctx.lineWidth = p.lineWidth;
            ctx.strokeStyle = p.color;
            ctx.stroke();
            ctx.globalAlpha = 1;
        }
        return p;
    }

    function renderParticule(anim) {
        for (var i = 0; i < anim.animatables.length; i++) {
            anim.animatables[i].target.draw();
        }
    }

    function animateParticules(x, y) {
        var circle = createCircle(x, y);
        var particules = [];
        for (var i = 0; i < numberOfParticules; i++) {
            particules.push(createParticule(x, y));
        }
        anime.timeline().add({
            targets: particules,
            x: function (p) { return p.endPos.x; },
            y: function (p) { return p.endPos.y; },
            radius: 0.1,
            duration: anime.random(1200, 1800),
            easing: 'easeOutExpo',
            update: renderParticule
        })
            .add({
                targets: circle,
                radius: anime.random(80, 160),
                lineWidth: 0,
                alpha: {
                    value: 0,
                    easing: 'linear',
                    duration: anime.random(600, 800),
                },
                duration: anime.random(1200, 1800),
                easing: 'easeOutExpo',
                update: renderParticule,
                offset: 0
            });
    }

    var render = anime({
        duration: Infinity,
        update: function () {
            ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);
        }
    });

    document.addEventListener(tap, function (e) {
        window.human = true;
        render.play();
        updateCoords(e);
        animateParticules(pointerX, pointerY);
    }, false);

    var centerX = window.innerWidth / 2;
    var centerY = window.innerHeight / 2;

    function autoClick() {
        if (window.human) return;
        animateParticules(
            anime.random(centerX - 50, centerX + 50),
            anime.random(centerY - 50, centerY + 50)
        );
        anime({ duration: 200 }).finished.then(autoClick);
    }

    autoClick();
    setCanvasSize();
    window.addEventListener('resize', setCanvasSize, false);
</script>
<script>
    var dayGroup = document.getElementById("DayGroup");

    /* Canoe */
    var canoe = document.getElementsByClassName("canoe");
    var canoeReflection = document.getElementsByClassName("canoeReflection");

    /* Island */
    var treesPink = document.getElementsByClassName("treesPink");
    var treesOrange = document.getElementsByClassName("treesOrange");
    var CoralTriangle1 = document.getElementsByClassName("CoralTriangle1");
    var CoralTriangle2 = document.getElementsByClassName("CoralTriangle2");
    var CoralTriangle3 = document.getElementsByClassName("CoralTriangle3");

    /*Sea */
    var waveRight = document.getElementsByClassName("waveRight");
    var waveLeft = document.getElementsByClassName("waveLeft");


    /* Sky */
    var blueCloudLeft = document.getElementsByClassName("blueCloudLeft");
    var blueCloudRight = document.getElementsByClassName("blueCloudRight");
    var pinkCloud = document.getElementsByClassName("pinkCloud");
    var sunRayLeft = document.getElementsByClassName("sunRayLeft");
    var sunRayRight = document.getElementsByClassName("sunRayRight");

    /*Rflection*/
    var treesPinkR = document.getElementsByClassName("treesPinkR");
    var treesOrangeR = document.getElementsByClassName("treesOrangeR");
    var RCoralTriangle1 = document.getElementsByClassName("RCoralTriangle1");
    var RCoralTriangle2 = document.getElementsByClassName("RCoralTriangle2");
    var RCoralTriangle3 = document.getElementsByClassName("RCoralTriangle3");


    /* --------------------------- */
    /* Animation */
    //canoe
    var tlCanoe = new TimelineMax({
        repeat: -1,
        yoyo: true,
        ease: "easeInOut"
    });
    tlCanoe.fromTo(canoe, 1.5, {
        y: 0
    }, {
            y: 4
        })
    tlCanoe.fromTo(canoeReflection, 1.5, {
        y: 0
    }, {
            y: -4
        }, "-=1.5")






    //Sea
    var tlwaveLeft = new TimelineMax({
        repeat: -1,
        yoyo: true,
        ease: "easeInOut"
    });
    tlwaveLeft.fromTo(waveLeft, 5, {
        x: 0
    }, {
            x: 35
        })
    tlwaveLeft.fromTo(waveRight, 5, {
        x: 0
    }, {
            x: -35
        }, "-=5")






    //tree
    var tlswingingTree = new TimelineMax({
        repeat: -1,
        yoyo: true,
        ease: "easeInOut"
    });
    tlswingingTree.staggerFromTo(treesPink, 2, {
        transformOrigin: "50% 0%",
        rotation: "5deg",
    }, {
            rotation: "-5deg",
        }, .2);

    var ReflectswingingTree = new TimelineMax({
        repeat: -1,
        yoyo: true,
    });
    ReflectswingingTree.staggerFromTo(treesPinkR, 2, {
        transformOrigin: "50% 0%",
        rotation: "-5deg",
    }, {
            rotation: "5deg",
        }, .2);


    var tlOrangeTrees = new TimelineMax({
        repeat: -1,
        yoyo: true,
        ease: "easeInOut"
    });
    tlOrangeTrees.fromTo(treesOrange, 2, {
        transformOrigin: "50% 100%",
        rotation: "1deg",
    }, {
            rotation: "-1deg",
        }, .2);

    var ReflectOrangeTrees = new TimelineMax({
        repeat: -1,
        yoyo: true
    });
    ReflectOrangeTrees.fromTo(treesOrangeR, 2, {
        transformOrigin: "50% 0%",
        rotation: "-1deg",
    }, {
            rotation: "1deg",
        }, .2);


    var tlCoralTrees = new TimelineMax({ repeat: -1 });
    tlCoralTrees.set([CoralTriangle1, CoralTriangle3], {
        transformOrigin: "50% 20%",
        rotation: "0deg",
        repeatDelay: 2
    })
    tlCoralTrees.to([CoralTriangle1, CoralTriangle3], 1, {
        rotation: "6deg",
        ease: "easeInOut"
    })
    tlCoralTrees.to([CoralTriangle1, CoralTriangle3], 1, {
        rotation: "-6deg",
        ease: "easeInOut"
    })
    tlCoralTrees.to([CoralTriangle1, CoralTriangle3], .5, {
        rotation: "3deg",
        ease: "easeInOut"
    })
    tlCoralTrees.to([CoralTriangle1, CoralTriangle3], .5, {
        rotation: "-3deg",
        ease: "easeInOut"
    })
    tlCoralTrees.to([CoralTriangle1, CoralTriangle3], .4, {
        rotation: "2.5deg",
        ease: "easeInOut"
    })
    tlCoralTrees.to([CoralTriangle1, CoralTriangle3], .4, {
        rotation: "-2.5deg",
        ease: "easeInOut"
    })
    tlCoralTrees.to([CoralTriangle1, CoralTriangle3], .4, {
        rotation: "0deg",
        ease: "easeInOut"
    })



    var tlCoralTree2 = new TimelineMax({ repeat: -1 });
    tlCoralTree2.set(CoralTriangle2, {
        transformOrigin: "50% 20%",
        rotation: "0deg",
        delay: .5,
        repeatDelay: 2.2
    })
    tlCoralTree2.to(CoralTriangle2, .85, {
        rotation: "6deg",
        ease: "easeInOut"
    })
    tlCoralTree2.to(CoralTriangle2, .85, {
        rotation: "-6deg",
        ease: "easeInOut"
    })
    tlCoralTree2.to(CoralTriangle2, .5, {
        rotation: "3deg",
        ease: "easeInOut"
    })
    tlCoralTree2.to(CoralTriangle2, .5, {
        rotation: "-3deg",
        ease: "easeInOut"
    })
    tlCoralTree2.to(CoralTriangle2, .4, {
        rotation: "2.5deg",
        ease: "easeInOut"
    })
    tlCoralTree2.to(CoralTriangle2, .4, {
        rotation: "-2.5deg",
        ease: "easeInOut"
    })
    tlCoralTree2.to(CoralTriangle2, .4, {
        rotation: "0deg",
        ease: "easeInOut"
    })


    //Coral Tirangles Reflection
    var ReflectCoralTrees = new TimelineMax({ repeat: -1 });
    ReflectCoralTrees.set([RCoralTriangle1, RCoralTriangle3], {
        transformOrigin: "50% 80%",
        rotation: "0deg",
        repeatDelay: 2
    })
    ReflectCoralTrees.to([RCoralTriangle1, RCoralTriangle3], 1, {
        rotation: "-6deg",
        ease: "easeInOut"
    })
    ReflectCoralTrees.to([RCoralTriangle1, RCoralTriangle3], 1, {
        rotation: "6deg",
        ease: "easeInOut"
    })
    ReflectCoralTrees.to([RCoralTriangle1, RCoralTriangle3], .5, {
        rotation: "-3deg",
        ease: "easeInOut"
    })
    ReflectCoralTrees.to([RCoralTriangle1, RCoralTriangle3], .5, {
        rotation: "3deg",
        ease: "easeInOut"
    })
    ReflectCoralTrees.to([RCoralTriangle1, RCoralTriangle3], .4, {
        rotation: "-2.5deg",
        ease: "easeInOut"
    })
    ReflectCoralTrees.to([RCoralTriangle1, RCoralTriangle3], .4, {
        rotation: "2.5deg",
        ease: "easeInOut"
    })
    ReflectCoralTrees.to([RCoralTriangle1, RCoralTriangle3], .4, {
        rotation: "0deg",
        ease: "easeInOut"
    })


    var ReflectCoralTree2 = new TimelineMax({ repeat: -1 });
    ReflectCoralTree2.set(CoralTriangle2, {
        transformOrigin: "50% 80%",
        rotation: "0deg",
        delay: .5,
        repeatDelay: 2.2
    })
    ReflectCoralTree2.to(RCoralTriangle2, .85, {
        rotation: "-6deg",
        ease: "easeInOut"
    })
    ReflectCoralTree2.to(RCoralTriangle2, .85, {
        rotation: "6deg",
        ease: "easeInOut"
    })
    ReflectCoralTree2.to(RCoralTriangle2, .5, {
        rotation: "-3deg",
        ease: "easeInOut"
    })
    ReflectCoralTree2.to(RCoralTriangle2, .5, {
        rotation: "3deg",
        ease: "easeInOut"
    })
    ReflectCoralTree2.to(RCoralTriangle2, .4, {
        rotation: "-2.5deg",
        ease: "easeInOut"
    })
    ReflectCoralTree2.to(RCoralTriangle2, .4, {
        rotation: "2.5deg",
        ease: "easeInOut"
    })
    ReflectCoralTree2.to(RCoralTriangle2, .4, {
        rotation: "0deg",
        ease: "easeInOut"
    })



    //sky
    var tlblueCloud = new TimelineMax({
        repeat: -1,
        yoyo: true,
    });
    tlblueCloud.fromTo(blueCloudLeft, 5.5, {
        x: 0
    }, {
            x: 55,
            ease: "linear"
        })
    tlblueCloud.fromTo(blueCloudRight, 5.5, {
        x: 0
    }, {
            x: -55,
            ease: "linear"
        }, "-=5")


    var tlpinkCloud = new TimelineMax({
        repeat: -1,
        yoyo: true,
        ease: "easeInOut"
    });
    tlpinkCloud.staggerFromTo(pinkCloud, 20, {
        x: 0
    }, {
            x: 300
        }, 1.5)


    var tlsunRays = new TimelineMax({
        repeat: -1,
        yoyo: true,
    });
    tlsunRays.fromTo(sunRayLeft, 4.5, {
        x: 0
    }, {
            x: 25,
            ease: "linear"
        })
    tlsunRays.fromTo(sunRayRight, 4.5, {
        x: 0
    }, {
            x: -25,
            ease: "linear"
        }, "-=5")
</script>
<script>
    console.clear();

    const loginBtn = document.getElementById('login');
    const signupBtn = document.getElementById('signup');

    loginBtn.addEventListener('click', (e) => {
        let parent = e.target.parentNode.parentNode;
        Array.from(e.target.parentNode.parentNode.classList).find((element) => {
            if (element !== "slide-up") {
                parent.classList.add('slide-up')
            } else {
                signupBtn.parentNode.classList.add('slide-up')
                parent.classList.remove('slide-up')
            }
        });
    });

    signupBtn.addEventListener('click', (e) => {
        let parent = e.target.parentNode;
        Array.from(e.target.parentNode.classList).find((element) => {
            if (element !== "slide-up") {
                parent.classList.add('slide-up')
            } else {
                loginBtn.parentNode.parentNode.classList.add('slide-up')
                parent.classList.remove('slide-up')
            }
        });
    });
</script>